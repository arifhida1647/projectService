<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap"
    rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <title>UPN SEHAT</title>
  <style>
    @import url('"https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');

    .font-inter {
      font-family: 'Inter', sans-serif;
    }

    .hero-section {
      background-image: url("/img/background.png");
      background-size: cover;
      background-position: center;
    }

    .spinner {
      border-top-color: transparent;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      border: 4px solid;
      border-color: white;
      border-top-color: transparent;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }
  </style>
</head>

<body class="bg-gray-100 w-full font-inter">
  <!-- NAVBAR -->
  <header class="bg-white fixed top-0 left-0 w-full flex items-center z-50 border-b-2 border-gray-100">
    <div class="container mx-auto">
      <div class="flex items-center justify-between relative">
        <div class="px-4">
          <a href="#home">
            <img src="/img/logo.png" alt="upn-sehat" class="block py-8" />
          </a>
        </div>

        <!-- Hamburger -->
        <div class="flex items-center px-4">
          <button id="hamburger" name="hamburger" type="button" class="block absolute right-4 lg:hidden">
            <span class="w-[30px] h-[2px] my-2 block bg-gray-900"></span>
            <span class="w-[30px] h-[2px] my-2 block bg-gray-900"></span>
            <span class="w-[30px] h-[2px] my-2 block bg-gray-900"></span>
          </button>
        </div>

        <!-- List -->
        <nav id="nav-menu"
          class="hidden absolute py-2 bg-white shadow-lg rounded-lg max-w-[250px] w-full right-4 top-full lg:block lg:static lg:bg-transparent lg:max-w-full lg:shadow-none lg:rounded-none">
          <ul class="block lg:flex">
            <li class="group content-center">
              <a href="/" class="text-gray-900 mx-6 py-2 flex group-hover:text-blue-600">Beranda</a>
            </li>
            <li class="group content-center">
              <a href="#jadwal-obat" class="text-gray-900 mx-6 py-2 flex group-hover:text-blue-600">Jadwal Obat</a>
            </li>
            <li class="group content-center">
              <a href="#artikel" class="text-gray-900 mx-6 py-2 flex group-hover:text-blue-600">Artikel</a>
            </li>
            <li class="group content-center">
              <a href="#video" class="text-gray-900 mx-6 py-2 flex group-hover:text-blue-600">Video</a>
            </li>
            <li class="group content-center">
              <a href="#about-us" class="text-gray-900 mx-6 py-2 flex group-hover:text-blue-600">About Us</a>
            </li>
            <li class="group lg:ml-auto mx-6 space-x-2 py-2 flex content-center">
              <button onclick="window.location.href='/to/to-login'"
                class="text-gray-800 px-4 py-2 rounded-md hover:bg-gray-400 focus:outline-none focus:ring focus:ring-gray-400 focus:ring-opacity-50 border-2 border-gray-200 w-full">
                Masuk
              </button>
              <button onclick="window.location.href='/to/to-signup'"
                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring focus:ring-blue-600 focus:ring-opacity-50 w-full">
                Daftar
              </button>
            </li>
          </ul>
        </nav>
      </div>
    </div>
  </header>

  <div class="container-main">
    <!-- Hero -->
    <div class="hero-section py-52">
      <div class="container mx-auto p-8">
        <h1 class="text-6xl text-gray-900 font-bold mb-4">
          Menuju Kesehatan Optimal
        </h1>
        <p class="text-gray-600">
          Temukan Dunia Kesehatan yang Luas: Mulai Perjalanan Kesehatan Anda
          dengan UPN Sehat!
        </p>
      </div>
    </div>
    <div class="container-jadwal-obat flex flex-col lg:flex-row lg:gap-80 m-[72px]">
      <div class="container-form w-full lg:w-1/3 p-[28px]">
        <div class="container-deskripsi">
          <h1 class="font-bold text-[36px]">Kelola Perawatan Anda dengan Mudah: Fitur Jadwal Obat</h1>
          <p class="text-[20px] text-[#6B7280] mt-[24px]">Jadwalkan dan Pantau Konsumsi Obat Anda dengan Lebih Efisien.
            Kesehatan Anda, Terjadwal dengan UPN Sehat!</p>
        </div>
        <form action="" class="mt-[24px]" id="medicineForm">
          <div class="container-input flex flex-col gap-[20px]">
            <div>
              <label for="namaObat" class="block font-medium text-[14px]">Nama Obat</label>
              <input class="mt-[8px] h-[42px] w-full rounded-lg placeholder:p-[16px] placeholder:text-[14px]"
                type="text" id="namaObat" placeholder="Nama Obat">
            </div>
            <div>
              <label for="jam" class="block font-medium text-[14px]">Jam (0-23)</label>
              <input class="mt-[8px] h-[42px] w-full rounded-lg placeholder:p-[16px] placeholder:text-[14px]"
                type="text" id="jam" placeholder="Jam">
            </div>
            <div>
              <label for="menit" class="block font-medium text-[14px]">Menit (0-59)</label>
              <input class="mt-[8px] h-[42px] w-full rounded-lg placeholder:p-[16px] placeholder:text-[14px]"
                type="text" id="menit" placeholder="Menit">
            </div>
          </div>
          <div class="container-button flex mt-[24px] gap-[16px]">
            <button type="button" id="tambahWaktu"
              class="text-[14px] font-medium text-[#1A56DB] flex-1 h-[40px] rounded-lg border-2 border-[#1A56DB]">Tambah
              Waktu</button>
            <button type="submit"
              class="text-[14px] flex-1 h-[40px] bg-[#1A56DB] text-white rounded-lg">Selesai</button>
          </div>
          <div id="resultMessage" class="mt-[16px] text-[14px]"></div>
        </form>
      </div>
      <div class="container-list-obat py-[28px] lg:w-2/3 flex flex-col gap-[16px]">
        <!-- Data Obat -->
      </div>
    </div>
  </div>
  <div class="container-artikel-terkait"></div>
  <div class="container-video"></div>


  </div>

  <footer class="bg-white text-white p-4">
    <div class="container mx-auto flex items-center justify-between">
      <!-- Logo -->
      <div class="logo flex space-x-3">
        <img src="/img/upnsehat-kecil.png" alt="Logo" class="h-8" />
        <img src="/img/upn-kecil.png" alt="Logo" class="h-8" />
      </div>
      <!-- Hak Cipta -->
      <p class="text-sm text-gray-900">
        &copy; 2024, Studi Informatika, Fakultas Ilmu Komputer. Hak Cipta
        Dilindungi
      </p>
    </div>
  </footer>

  <!-- Hmaburger Logic -->
  <script>
    const hamburger = document.querySelector("#hamburger");
    const navMenu = document.querySelector("#nav-menu");

    hamburger.addEventListener("click", function () {
      hamburger.classList.toggle("hamburger-active");
      navMenu.classList.toggle("hidden");
    });
  </script>

  <!-- Jika Belum Login maka akan ke Login.ejs -->
  <script>
    // Fungsi untuk mendapatkan nilai cookie berdasarkan nama
    function getCookie(name) {
      let cookieArr = document.cookie.split(";");

      for (let i = 0; i < cookieArr.length; i++) {
        let cookiePair = cookieArr[i].split("=");

        /* Menghapus spasi di awal nama cookie dan membandingkannya dengan string "name" */
        if (name == cookiePair[0].trim()) {
          // Mengembalikan nilai dari cookie
          return decodeURIComponent(cookiePair[1]);
        }
      }

      // Mengembalikan null jika tidak ada cookie yang ditemukan
      return null;
    }

    // Memeriksa apakah cookie "email" ada
    let emailCookie = getCookie("uid");

    if (emailCookie === null) {
      // Mengarahkan ke halaman login jika cookie tidak ditemukan
      window.location.href = "/to/to-login";
    }

  </script>

  <!-- Data Obat -->
  <script>
    let email; // Declare email variable in the global scope

    function getDataFromAPI(email) {
      // Lakukan request AJAX ke endpoint /cekCron dengan parameter email
      // Misalnya dengan menggunakan fetch API
      fetch('/cekCron?email=' + email)
        .then(response => response.json())
        .then(data => {
          // Panggil fungsi untuk membuat tampilan HTML dari data yang diterima
          createHTMLFromData(data);
        })
        .catch(error => console.error('Error:', error));
    }

    // Fungsi untuk membuat tampilan HTML dari data yang diterima
    function createHTMLFromData(data) {
      // Container untuk menampung list obat
      var containerListObat = document.querySelector('.container-list-obat');

      // Kosongkan containerListObat sebelum menambahkan data baru
      containerListObat.innerHTML = '';

      // Fungsi untuk mengubah format waktu menjadi format yang diinginkan
      function formatTime(time) {
        var splitTime = time.split(':');
        var hour = parseInt(splitTime[0]);
        var minute = parseInt(splitTime[1]);
        var ampm = hour >= 12 ? 'PM' : 'AM';
        hour = hour % 12 || 12;
        return hour + '.' + (minute < 10 ? '0' : '') + minute + ' ' + ampm;
      }

      // Iterate through each item in the response
      data.forEach(function (item, index) {
        // Create HTML elements
        var containerList = document.createElement('div');
        containerList.className = 'container-list-' + (index + 1) + ' flex justify-between bg-white p-[24px] rounded-lg';

        var containerNamaDanJadwalObat = document.createElement('div');
        containerNamaDanJadwalObat.className = 'container-nama-dan-jadwal-obat';

        var containerNama = document.createElement('div');
        containerNama.className = 'container-nama flex gap-[8px] h-[32px] items-center text-[#1F2A37]';

        var img = document.createElement('img');
        img.src = '/img/logo-obat.png';
        img.alt = '';

        var namaObat = document.createElement('p');
        namaObat.className = 'font-semibold text-[20px]';
        namaObat.textContent = item.namaObat;

        var containerJadwal = document.createElement('div');
        containerJadwal.className = 'container-jadwal mt-[16px]';

        var jadwalText = ""; // String untuk menyimpan waktu

        // Iterate through each time in the Hours array
        item.Hours.forEach(function (hour, hourIndex) {
          // Tambahkan tanda titik koma jika ini bukan waktu pertama
          if (hourIndex > 0) {
            jadwalText += " ; ";
          }
          jadwalText += formatTime(hour.time); // Format waktu
        });

        // Buat elemen <p> untuk menampilkan waktu
        var jadwal = document.createElement('p');
        jadwal.className = 'text-[#4B5563] text-[16px]';
        jadwal.textContent = jadwalText;

        // Append elemen waktu ke dalam containerJadwal
        containerJadwal.appendChild(jadwal);

        var containerDelete = document.createElement('div');
        containerDelete.className = 'container-delete';

        // Create delete button as image
        var imgDelete = document.createElement('img');
        imgDelete.src = '/img/delete-obat.png';
        imgDelete.alt = 'Delete';
        imgDelete.style.cursor = 'pointer'; // Add cursor style to make it look clickable

        // Attach click event to delete button (image)
        imgDelete.addEventListener('click', function () {
          // Build URL with parameters
          var url = '/delete-job?namaObat=' + encodeURIComponent(item.namaObat) + '&email=' + encodeURIComponent(email);
          // Send GET request
          fetch(url)
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to delete job');
              }
              // If successful, reload the data
              getEmailAndGetDataFromAPI();
            })
            .catch(error => console.error('Error:', error));
        });

        // Append delete button (image) to containerDelete
        containerDelete.appendChild(imgDelete);

        // Append containerList to the parent element (where you want to add it)
        containerListObat.appendChild(containerList);

        // Append elements to the containerList
        containerNama.appendChild(img);
        containerNama.appendChild(namaObat);

        containerNamaDanJadwalObat.appendChild(containerNama);
        containerNamaDanJadwalObat.appendChild(containerJadwal);

        containerDelete.appendChild(imgDelete);

        containerList.appendChild(containerNamaDanJadwalObat);
        containerList.appendChild(containerDelete);

        // Append containerList to the parent element (where you want to add it)
        containerListObat.appendChild(containerList);
      });
    }

    // Panggil fungsi untuk mendapatkan email dari cookie dan mengambil data dari API berdasarkan email
    function getEmailAndGetDataFromAPI() {
      // Fungsi untuk mendapatkan email dari cookie
      function getEmailFromCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
      }

      // Mendapatkan email dari cookie
      email = getEmailFromCookie('uid'); // Assign the email to the global variable

      // Lakukan request AJAX ke endpoint /cekEmail dengan parameter uid
      fetch('/cekEmail?uid=' + email)
        .then(response => response.json())
        .then(data => {
          // Panggil fungsi untuk mendapatkan data dari API menggunakan email yang diperoleh
          getDataFromAPI(data.message);
          email = data.message;
        })
        .catch(error => console.error('Error:', error));
    }

    // Panggil fungsi untuk mendapatkan email dari cookie dan mengambil data dari API berdasarkan email
    getEmailAndGetDataFromAPI();

  </script>

  <!-- Create Jadwal -->
  <script>
    // Mendapatkan email dari cookie
    email = getEmailFromCookie('uid'); // Assign the email to the global variable
    function getEmailFromCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(';').shift();
    }
    // Lakukan request AJAX ke endpoint /cekEmail dengan parameter uid
    fetch('/cekEmail?uid=' + email)
      .then(response => response.json())
      .then(data => {
        // Panggil fungsi untuk mendapatkan data dari API menggunakan email yang diperoleh
        getDataFromAPI(data.message);
        email = data.message;
      })
      .catch(error => console.error('Error:', error));



    document.getElementById('tambahWaktu').addEventListener('click', function () {
      const button = document.getElementById('tambahWaktu');
      const originalText = button.innerHTML;
      button.innerHTML = '<div class="spinner border-white border-t-transparent border-4 w-5 h-5 rounded-full animate-spin"></div>';
      button.disabled = true;

      const resultMessage = document.getElementById('resultMessage');
      resultMessage.innerHTML = '';

      const namaObat = document.getElementById('namaObat').value;
      const jam = document.getElementById('jam').value;
      const menit = document.getElementById('menit').value;

      const data = {
        namaObat: namaObat,
        hoursTime: jam,
        minutesTime: menit,
        email: email
      };

      fetch('/create-job', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
        .then(response => {
          if (response.status === 400) {
            throw new Error('Sudah ada waktunya');
          }
          return response.json();
        })
        .then(data => {
          console.log('Success:', data);
          button.innerHTML = originalText;
          button.disabled = false;
          resultMessage.innerHTML = '<span class="text-green-500">Berhasil ditambahkan</span>';
        })
        .catch((error) => {
          console.error('Error:', error);
          button.innerHTML = originalText;
          button.disabled = false;
          resultMessage.innerHTML = `<span class="text-red-500">${error.message}</span>`;
        });
    });

    document.getElementById('medicineForm').addEventListener('submit', function (event) {
      event.preventDefault();
      // Add any additional form submission logic here
      console.log('Form submitted');
    });
  </script>
</body>

</html>